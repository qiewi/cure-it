datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum BloodType {
  A
  B
  AB
  O
}

enum Gender {
  Male
  Female
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  birthdate     DateTime?
  birthplace    String?
  idCardNumber  String?
  phoneNumber   String?
  address       String?
  bloodType     BloodType?
  gender        Gender?
  role          Role            @default(USER)
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Doctor {
  id           String     @id @default(cuid())
  name         String
  title        String
  price        Int
  patientCount Int
  timeMinutes  Int
  image        String?
  speciality   String
  rumahSakitId String
  rumahSakit   RumahSakit? @relation(fields: [rumahSakitId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RumahSakit {
  id          String  @id @default(cuid())
  name        String
  image       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Doctor    Doctor[]
}
